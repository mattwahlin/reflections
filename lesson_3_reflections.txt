When would you want to create a remote repository rather than keeping all your work local?

When the possibility exists that I would share the reporistory (it also serves as a convenient remote backup for my work!)

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Automatic updates would be VERY problematic if more than one person was working on a project being maintained in the repository!

Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a copy of a repository made within github, with information linking it back to its source repository, however changes made to the forked repository do NOT go back to the parent from which it was 'forked'. A clone of a repository (either from a local or remote repository) is an exact copy made to your computer which can then be locally modified, A branch represents an intent to create a set of changes in a single reporitory which can be tracked as separate from other branches in that repository.

What is the benefit of having a copy of the last known state of the remote stored locally?

By having this copy, git has the information necessary to merg both changes made on your local repository AND changes that have occurred on the remote repository since the last time you pulled from it.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without using Git or Github, there would have to be a lot of manually communication between parties to know who was changing what, and (assuming changes collided) a LOT of work using diff to resolve changes.  Using Git & Github makes changes MUCH easier!

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I would use a separate branch when adding a significant, new feature to a project (as opposed to bug fixes or minor feature additions), especially if developing the new feature would require significant iteration and/ or requirement discovery and would (maybe) require collaboration between multiple individuals. Working directly on the master branch would fit better if the work would be relatively 'compact'. As for benefits: working on a separate branch is a good way to compartmentalize/ track the history of development for the work that branch is focused on, but it does introduce complexity when merging back to the master branch; working on the master branch is better when changes are relatively small or the number of people collaborating is small...


