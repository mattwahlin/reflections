What happens when you initialize a repository? Why do you need to do it?

GIT sets up the necessary metadata to track files that are under its control in the directory and sets the initial (empty) change tracking history.

How is the staging area different from the working directory and the repository?  It implements the concept of files that will be part of the next commit...
What value do you think it offers? flexibility in choosing new files to commit, plus (probably) the tracking of which files already part of the repository are changed since the last commit.

How can you use the staging area to make sure you have one commit per logical
change?

By only doing "git add" for files which have been modified for that change; unrelated changes can be added/ committed after the commit for the 1st logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be useful when adding changes to a program which add new features but are non-trivial; each new feature that is 'branched' can be added to a known, stable version of the program without having to deal with potential bugs added on other branches implementing other features.

How do the diagrams help you visualize the branch structure?

They give an easy visualization of where branches originate and what is in them.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

All changes from the branches are merged into a single branch, displaying in time-order in the log. The representation used in teh diagram reflects the history of the separate creation of the branches, as well as the act of merging them into a single branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Automatic merging can save a lot of work if changes tend to be on distinct sections of code, however things can get complex when changes conflict and can't be resolved by the automatic merge.
